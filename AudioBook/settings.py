"""
Django settings for AudioBook project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, True)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start.sh development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# False if not in os.environ because of casting above
DEBUG = env('DEBUG')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# JWT SIGNING_KEY
JWT_SIGNING_KEY = env('JWT_SIGNING_KEY')
if not JWT_SIGNING_KEY:
    raise ValueError("JWT_SIGNING_KEY environment variable not set")

# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.user.apps.UserConfig',
]

THIRD_APPS = [
    # 'rest_framework_redesign',
    # 'drf_material',
    "debug_toolbar",
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'djoser',
    # OAuth
    'oauth2_provider',
    'social_django',
    'drf_social_oauth2',
    "corsheaders",
]

LOCAL_APPS = [
    'apps.base.apps.BaseConfig',
    'apps.category.apps.CategoryConfig',
    'apps.notification.apps.NotificationConfig',
    'apps.subscription.apps.SubscriptionConfig'
]

INSTALLED_APPS += LOCAL_APPS
INSTALLED_APPS += THIRD_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",  # new
]

ROOT_URLCONF = 'AudioBook.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # OAuth
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'AudioBook.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': env.db(),
    'extra': env.db_url(
        'DATABASE_URL',
        default=env('DATABASE_URL'),
        engine=env('SQL_ENGINE')
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

# LANGUAGE_CODE = 'uz-uz'
LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'user.User'

DJOSER = {
    'SERIALIZERS': {
        'user_create': 'apps.user.serializers.CustomUserCreateSerializer',
        'user': 'apps.user.serializers.CustomUserSerializer',
        'current_user': 'apps.user.serializers.CustomUserSerializer',
    }
}

# DJOSER = {
#     'activation': 'djoser.serializers.ActivationSerializer',
#     'password_reset': 'djoser.serializers.SendEmailResetSerializer',
#     'password_reset_confirm': 'djoser.serializers.PasswordResetConfirmSerializer',
#     'password_reset_confirm_retype': 'djoser.serializers.PasswordResetConfirmRetypeSerializer',
#     'set_password': 'djoser.serializers.SetPasswordSerializer',
#     'set_password_retype': 'djoser.serializers.SetPasswordRetypeSerializer',
#     'set_username': 'djoser.serializers.SetUsernameSerializer',
#     'set_username_retype': 'djoser.serializers.SetUsernameRetypeSerializer',
#     'username_reset': 'djoser.serializers.SendEmailResetSerializer',
#     'username_reset_confirm': 'djoser.serializers.UsernameResetConfirmSerializer',
#     'username_reset_confirm_retype': 'djoser.serializers.UsernameResetConfirmRetypeSerializer',
#     # 'user_create': 'djoser.serializers.UserCreateSerializer',
#     'user_create': 'user.serializers.UserCreateSerializer',
#     # 'user_create_password_retype': 'djoser.serializers.UserCreatePasswordRetypeSerializer',
#     'user_delete': 'djoser.serializers.UserDeleteSerializer',
#     'user': 'djoser.serializers.UserSerializer',
#     'current_user': 'user.serializers.CurrentUserSerializer',
#     'token': 'djoser.serializers.TokenSerializer',
#     'token_create': 'djoser.serializers.TokenCreateSerializer',
#     # 'USER_CREATE_PASSWORD_RETYPE': True,
# }

# DJOSER = {
#     'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
#     'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
#     'ACTIVATION_URL': '#/activate/{uid}/{token}',
#     'SEND_ACTIVATION_EMAIL': True,
#     'SERIALIZERS': {},
#     # mine
#     'SEND_CONFIRMATION_EMAIL': True,
#     # 'SET_PASSWORD_RETYPE': True,
#     # 'LOGOUT_ON_PASSWORD_CHANGE': True, # Logout only works with token based authentication.
#     # 'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True,
# }

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

INTERNAL_IPS = [
    "127.0.0.1",
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'auth_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'auth.log',
        },
    },
    'loggers': {
        'django.security.Authentication': {
            'handlers': ['auth_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'NON_FIELD_ERRORS_KEY': 'error',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # OAuth
        # 'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        # 'drf_social_oauth2.authentication.SocialAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PARSER_CLASSES': (
            'rest_framework.parsers.JSONParser',
            'rest_framework.parsers.FormParser',
            'rest_framework.parsers.MultiPartParser',  # Needed for file uploads
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Default refresh token lifetime
    'BLACKLIST_AFTER_ROTATION': True,
    'ROTATE_REFRESH_TOKENS': True,
    'SIGNING_KEY': JWT_SIGNING_KEY,
    'AUTH_HEADER_TYPES': ('JWT',),
    'ALGORITHM': 'HS256',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'AudioBook',
    'DESCRIPTION': 'Mobile app API',
    'VERSION': '0.0.1',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    # 'SECURITY': [{'oauth2': []}],
    # 'AUTHENTICATION_CLASSES': [
    #     # 'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    #     # 'drf_social_oauth2.authentication.SocialAuthentication',
    # ],
    # 'COMPONENT_SPLIT_REQUEST': True,
    # 'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    # 'OAUTH2_FLOWS': {
    #     'authorizationCode': {
    #         'authorizationUrl': 'https://accounts.google.com/o/oauth2/auth',
    #         'tokenUrl': 'https://oauth2.googleapis.com/token',
    #         'scopes': {
    #             'read': 'Read scope',
    #             'write': 'Write scope',
    #         },
    #     },
    # },
}


# AUTHENTICATION_BACKENDS = (
#     # Google OAuth2
#     'social_core.backends.google.GoogleOAuth2',
#
#     # drf-social-oauth2
#     'drf_social_oauth2.backends.DjangoOAuth2',
#
#     # Django
#     'django.contrib.auth.backends.ModelBackend',
# )
#
# # Google configuration
# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = "FgtjDFgA2VAK8V9z0QY9hpCsnuKOWLpGCu0ymZEe"
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = "c7btuiuB8d85146F4AFzljB3T0xGK6C4sikQreB4NCFQwhKDKpHxqqNDY4aUNIpVOURRyAqp08cHQnEVizyLwlmxEJZ8lxk1f2BP5z2iUsdcXtxckrR7gNzqzZ5P0dv8"
#
# # Define SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE to get extra permissions from Google.
# SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
#     'https://www.googleapis.com/auth/userinfo.email',
#     'https://www.googleapis.com/auth/userinfo.profile',
# ]
#
# OAUTH2_PROVIDER = {
#     'ACCESS_TOKEN_EXPIRE_SECONDS': 604800,  # 7 days
#     # 'ACCESS_TOKEN_EXPIRE_SECONDS': 900,  # 15 minutes
#     'SCOPES': {
#         'read': 'Read scope',
#         'write': 'Write scope',
#     }
# }
